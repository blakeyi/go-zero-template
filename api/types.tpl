// Code generated by goctl. DO NOT EDIT.
package types{{if .containsTime}}
import (
	"time"
	"strings"
)
{{else}}
import (
	"strings"
)
{{end}}
// 响应结构体定义
type Response struct {
	RetCode    int         `json:"ret_code"`
	RetMsg     string      `json:"ret_msg"`
	RetContent interface{} `json:"ret_content"`
}

type Errno struct {
	Code    int
	Message string
}

// 错误码定义,后续在此添加
var (
	Succeed       = &Errno{Code: 0, Message: "success"}
	ErrParam      = &Errno{Code: 10001, Message: "param error"}
)

func (r *Response) SetErrorCode(e *Errno, errs ...error) {
	r.RetCode = e.Code
	r.RetMsg = e.Message
	if len(errs) > 0 {
	    var errMsg string
		for _, err := range errs {
			errMsg += err.Error() + ","
		}
		errMsg = strings.Trim(errMsg, ",")
		r.RetContent = errMsg
	}
}

{{.types}}


